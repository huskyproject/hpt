cmake_minimum_required(VERSION 2.8.11)
PROJECT(hpt C)
set(areafix_VERSION 1.9.0)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

include(FindPerlLibs)

if(CMAKE_BUILD_TYPE MATCHES Debug)
  ADD_DEFINITIONS(-g -DDEBUG -D_DEBUG)
  set(CMAKE_CONFIGURATION_TYPES "Debug" CACHE STRING "My multi config types" FORCE)
else(CMAKE_BUILD_TYPE MATCHES Debug)
  ADD_DEFINITIONS(-DNDEBUG)
  set(CMAKE_CONFIGURATION_TYPES "Release" CACHE STRING "My multi config types" FORCE)
endif(CMAKE_BUILD_TYPE MATCHES Debug)

if (MSVC)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../out/lib")
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../out/bin")
  ADD_DEFINITIONS(-DWIN32 -D_WINDOWS -D_DLL -D_CONSOLE -D_MAKE_DLL -D_CRT_SECURE_NO_WARNINGS)
  include_directories("${CMAKE_CURRENT_SOURCE_DIR};${CMAKE_CURRENT_SOURCE_DIR}/h;${CMAKE_CURRENT_SOURCE_DIR}/../huskylib;${CMAKE_CURRENT_SOURCE_DIR}/../fidoconf;${CMAKE_CURRENT_SOURCE_DIR}/../smapi;${CMAKE_CURRENT_SOURCE_DIR}/../areafix")
  if(CMAKE_BUILD_TYPE MATCHES Debug)
    list( APPEND CMAKE_FIND_ROOT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../out/lib/Debug" )
  else(CMAKE_BUILD_TYPE MATCHES Debug)
    list( APPEND CMAKE_FIND_ROOT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../out/lib/Release" )
  endif(CMAKE_BUILD_TYPE MATCHES Debug)
else ()
  include_directories("h")
  ADD_DEFINITIONS(-Wall -DUNIX)
endif (MSVC)

find_library(husky_LIB NAMES husky PATHS "${CMAKE_FIND_ROOT_PATH}")
find_library(fidoconfig_LIB NAMES fidoconfig PATHS "${CMAKE_FIND_ROOT_PATH}")
find_library(smapi_LIB NAMES smapi PATHS "${CMAKE_FIND_ROOT_PATH}")
find_library(areafix_LIB NAMES areafix PATHS "${CMAKE_FIND_ROOT_PATH}")
find_library(hptzip_LIB NAMES hptzip PATHS "${CMAKE_FIND_ROOT_PATH}")



message("-------------------------")
message("System            : ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_VERSION}")
message("Compiler          : ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER_VERSION}")
message("Prefix            : ${CMAKE_INSTALL_PREFIX} (run \"cmake . -DCMAKE_INSTALL_PREFIX:PATH=/other\" for other prefix)")
message("libhusky          : ${husky_LIB}")
message("libfidoconfig     : ${fidoconfig_LIB}")
message("libsmapi          : ${smapi_LIB}")
message("libareafix        : ${areafix_LIB}")
message("hptzip            : ${hptzip_LIB}")
message("perl              : ${PERLLIBS_FOUND}")
message("Build type        : ${CMAKE_CONFIGURATION_TYPES}")
message("-------------------------")

ADD_EXECUTABLE(pktinfo src/pktinfo.c src/dupe.c src/pktread.c src/fcommon.c src/global.c)
ADD_EXECUTABLE(tpkt src/tpkt.c src/dupe.c src/pktread.c src/fcommon.c src/global.c src/pktwrite.c)
ADD_EXECUTABLE(txt2pkt src/txt2pkt.c src/dupe.c src/pktread.c src/fcommon.c src/global.c src/pktwrite.c)
ADD_EXECUTABLE(hptlink src/hptlink.c src/global.c)
ADD_EXECUTABLE(hpttree src/hpttree.c)
ADD_EXECUTABLE(hpt src/hpt.c src/dupe.c src/pktread.c src/fcommon.c src/global.c src/pktwrite.c src/toss.c src/scan.c src/scanarea.c src/post.c src/hptafix.c src/seenby.c src/link.c src/carbon.c ${perl_SRC})
target_link_libraries(pktinfo ${husky_LIB} ${fidoconfig_LIB} ${smapi_LIB})
target_link_libraries(tpkt ${husky_LIB} ${fidoconfig_LIB} ${smapi_LIB})
target_link_libraries(txt2pkt ${husky_LIB} ${fidoconfig_LIB} ${smapi_LIB})
target_link_libraries(hptlink ${husky_LIB} ${fidoconfig_LIB} ${smapi_LIB})
target_link_libraries(hpttree ${husky_LIB} ${fidoconfig_LIB} ${smapi_LIB})
target_link_libraries(hpt ${husky_LIB} ${fidoconfig_LIB} ${smapi_LIB} ${areafix_LIB})

if (${PERLLIBS_FOUND})
  include_directories(${PERL_INCLUDE_PATH})
  ADD_DEFINITIONS(-DPERL=1)
  target_link_libraries(hpt ${PERL_LIBRARY})
endif (${PERLLIBS_FOUND})

if (hptzip_LIB)
  ADD_DEFINITIONS(-DUSE_HPTZIP=1 -DNOUNCRYPT -DNOCRYPT)
  target_link_libraries(hpt ${hptzip_LIB})
  if (MSVC)
    include_directories("${CMAKE_CURRENT_SOURCE_DIR}/../hptzip")
  endif()
endif(hptzip_LIB)

if (NOT MSVC)
  INSTALL(TARGETS pktinfo tpkt txt2pkt hptlink hpttree hpt
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
  )
  set(CPACK_GENERATOR ${CPACK_GENERATOR} TGZ)
endif (NOT MSVC)
set (CPACK_PACKAGE_VERSION_MAJOR "1")
set (CPACK_PACKAGE_VERSION_MINOR "9")
file(READ h/cvsdate.h CPACK_PACKAGE_VERSION_PATCH LIMIT 10 OFFSET 17)
string(SUBSTRING ${CPACK_PACKAGE_VERSION_PATCH} 0 10 CPACK_PACKAGE_VERSION_PATCH)
string(REGEX REPLACE "-" "" CPACK_PACKAGE_VERSION_PATCH ${CPACK_PACKAGE_VERSION_PATCH})
INCLUDE(CPack)
